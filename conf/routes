# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET   /                       controllers.Default.redirect(to = "https://horstmann.com/codecheck/index.html")
# Favicon
GET   /favicon.ico            controllers.Assets.at(path="/public", file="favicon.ico")
GET   /robots.txt             controllers.Assets.at(path="/public", file="robots.txt")

# Health check
GET  /health                  controllers.Application.health(request: Request)

# TODO This is because horstmann_all_min loads theme_XXX from /script 
GET  /script/theme-chrome.js  controllers.Assets.at(path="/public/ace", file="theme-chrome.js")
GET  /script/theme-kuroir.js  controllers.Assets.at(path="/public/ace", file="theme-kuroir.js")

# Map static resources from the /public folder to the /assets URL path
GET  /assets/*file            controllers.Assets.versioned(path="/public", file: Asset)

# Web interface 
GET	 /files						controllers.Files.filesHTML2(request: Request, repo: String ?= "ext", problem: String, ccid: String ?= null)
GET	 /files/:problem			controllers.Files.filesHTML2(request: Request, repo: String ?= "ext", problem: String, ccid: String ?= null)
GET  /files/:repo/:problem		controllers.Files.filesHTML2(request: Request, repo: String, problem: String,          ccid: String ?= null)
POST /checkNJS					controllers.Check.checkNJS(request: Request)
GET	 /tracer/:problem			controllers.Files.tracer(request: Request, repo: String ?= "ext", problem: String, ccid: String ?= null)
GET  /tracer/:repo/:problem		controllers.Files.tracer(request: Request, repo: String, problem: String,          ccid: String ?= null)

# Used by textbook-problems, cs046 Split, checknjs 
GET  /fileData                controllers.Files.fileData(request: Request, repo: String ?= "ext", problem: String, ccid: String ?= null)
GET  /fileData/:problem       controllers.Files.fileData(request: Request, repo: String ?= "ext", problem: String, ccid: String ?= null)
GET  /fileData/:repo/:problem controllers.Files.fileData(request: Request, repo: String, problem: String, ccid: String ?= null)

# For pyodide client
GET  /setupData/:problem       controllers.Check.setupReport(request: Request, repo: String ?= "ext", problem: String)
GET  /setupData/:repo/:problem controllers.Check.setupReport(request: Request, repo: String, problem: String)

POST /uploadProblem                     controllers.Upload.uploadProblem(request: Request)
POST /uploadFiles                       controllers.Upload.uploadFiles(request: Request)
GET  /private/problem/:problem/:editKey controllers.Upload.editKeySubmit(request: Request, problem: String, editKey: String)
# TODO Legacy without /private
GET  /edit/:problem/:editKey            controllers.Upload.editKeySubmit(request: Request, problem: String, editKey: String)
POST /editedFiles/:problem/:editKey     controllers.Upload.editedFiles(request: Request, problem: String, editKey: String)
POST /editedProblem/:problem/:editKey   controllers.Upload.editedProblem(request: Request, problem: String, editKey: String)

# Legacy--TODO: Eliminate
GET	 /codecheck/files						controllers.Files.filesHTML(request: Request, repo: String ?= "ext", problem: String, ccu: String ?= null)
GET	 /codecheck/files/:problem	controllers.Files.filesHTML(request: Request, repo: String ?= "ext", problem: String, ccu: String ?= null)
POST /codecheck/check						controllers.Check.checkHTML(request: Request)
# Used in Core Java for the Impatient 2e
POST /check                     controllers.Check.checkHTML(request: Request)
# Used in Core Java 13e/Core Java for the Impatient 4e
POST /run                       controllers.Check.run(request: Request)

# Assignments

# Student starts
GET  /assignment/:assignmentID                      controllers.Assignment.work(request: Request, assignmentID: String, ccid: String = null, key: String = null, isStudent: Boolean = true)
# Student wants to change ID (hacky)
GET  /assignment/:assignmentID/:ccid                controllers.Assignment.work(request: Request, assignmentID: String, ccid: String, key: String = null, isStudent: Boolean = true)
# Student resumes
GET  /private/resume/:assignmentID/:ccid/:key       controllers.Assignment.work(request: Request, assignmentID: String, ccid: String, key: String, isStudent: Boolean = true)

# Instructor views a student submission
GET  /private/submission/:assignmentID/:ccid/:key   controllers.Assignment.work(request: Request, assignmentID: String, ccid: String, key: String, isStudent: Boolean = false)
# Instructor views someone else's assignment
GET  /viewAssignment/:assignmentID                  controllers.Assignment.work(request: Request, assignmentID: String, ccid: String = null, key: String = null, isStudent: Boolean = false)
# Instructor views own assignment
GET  /private/assignment/:assignmentID/:key         controllers.Assignment.work(request: Request, assignmentID: String, ccid: String = null, key: String, isStudent: Boolean = false)

# Instructor makes new assignment
GET  /newAssignment                                 controllers.Assignment.edit(request: Request, assignmentID: String = null, key: String = null)
# Instructor copies existing assignment 
GET  /copyAssignment/:assignmentID                  controllers.Assignment.edit(request: Request, assignmentID: String, key: String = null)
# Instructor edits existing assignment
GET  /private/editAssignment/:assignmentID/:key     controllers.Assignment.edit(request: Request, assignmentID: String, key: String)

# Instructor views submissions
GET  /private/viewSubmissions/:assignmentID/:key    controllers.Assignment.viewSubmissions(request: Request, assignmentID: String, key: String)

# Instructor saves assignment
POST /saveAssignment          controllers.Assignment.saveAssignment(request: Request)
# Instructor saves feedback
POST /saveComment          controllers.Assignment.saveComment(request: Request)
# Student saves work
POST /saveWork                controllers.Assignment.saveWork(request: Request)

# LTI Launch (legacy with query param id)
POST /lti/assignment          controllers.LTIAssignment.launch(request: Request, assignmentID: String = null)
# LTI Launch 
POST /assignment/:assignmentID controllers.LTIAssignment.launch(request: Request, assignmentID: String)
# LTI Launch, in case someone posts a viewAssignment URL instead of cloning it 
POST /viewAssignment/:assignmentID controllers.LTIAssignment.launch(request: Request, assignmentID: String)
# Bridge (with query param url)
POST /lti/bridge         controllers.LTIAssignment.launch(request: Request, assignmentID: String = null)

# Student saves work 
POST /lti/saveWork            controllers.LTIAssignment.saveWork(request: Request)
# Student request sending score to LMS
POST /lti/sendScore           controllers.LTIAssignment.sendScore(request: Request)
# Canvas call to createAssignment (resource selection)
POST /lti/createAssignment    controllers.LTIAssignment.createAssignment(request: Request)
# Instructor saves assignment
POST /lti/saveAssignment      controllers.LTIAssignment.saveAssignment(request: Request)

# Instructor views submissions
GET  /lti/viewSubmissions     controllers.LTIAssignment.viewSubmissions(request: Request)
# Instructor views a submission
GET  /lti/viewSubmission      controllers.LTIAssignment.viewSubmission(request: Request)
# Instructor downloads submissions JSON
GET  /lti/allSubmissions     controllers.LTIAssignment.allSubmissions(request: Request)
# Instructor edits current assignment
GET  /lti/editAssignment/:assignmentID controllers.LTIAssignment.editAssignment(request: Request, assignmentID: String)

# Shows LMS config XML
GET /lti/config               controllers.LTIAssignment.config(request: Request)

# LTI CodeCheck
POST /files/:problem          controllers.LTIProblem.launchCodeCheck(request: Request, repo: String = "ext", problem: String)
POST /files/:repo/:problem    controllers.LTIProblem.launchCodeCheck(request: Request, repo: String, problem: String)

# LTI Tracer
POST /tracer/:problem          controllers.LTIProblem.launchTracer(request: Request, repo: String = "ext", problem: String)
POST /tracer/:repo/:problem    controllers.LTIProblem.launchTracer(request: Request, repo: String, problem: String)

# LTI Interactive Problems
POST /lti/problem             controllers.LTIProblem.launch(request: Request)
POST /lti/retrieve            controllers.LTIProblem.retrieve(request: Request)
POST /lti/send                controllers.LTIProblem.send(request: Request)
